#################################################
# Host Configurations
#################################################
---
- hosts: host
  vars_files:
    - group_vars/emnies_hosts
  tasks:
    - name: Install virtualbox if needed
      become: true
      apt:
        name: virtualbox
        update_cache: yes
        state: present

    # @TODO: install guest additions

    - local_action: stat path=/{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
      register: zipped_vagrant_exists
      tags: vagrant

    - name: If vagrant is not available get vagrant zip source and checksum it
      get_url:
        url: "{{ vagrant_zip_base_path }}{{ vagrant_zip_file }}"
        dest: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        checksum: "{{ vagrant_zip_file_checksum }}"
        force: no
      register: get_vagrant
      when: zipped_vagrant_exists.stat.exists == False
      tags: vagrant

    - name: Unzip vagrant zip if available and keep it
      unarchive:
        src: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        dest: /{{ playbook_dir }}/vagrant/
        remote_src: yes
        creates: /{{ playbook_dir }}/vagrant/vagrant
      tags: [vagrant, unzip]

    - name: Remove vagrant zip source
      file:
        path: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        state: absent
      tags: vagrant

    - name: ls
      shell: ls {{ playbook_dir }}/vagrant
      register: out

    - debug: var=out.stdout_lines

    - name: vagrant force destroy if present
      command: ./vagrant -f destroy
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - name: vagrant up with provision
      command: ./vagrant up --provision
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.apache
      register: geerlingguy_apache_exists
      tags: ansible

    - name: install geerlingguy apache from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.apache
      register: out
      tags: ansible
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_apache_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: ansible

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.php
      register: geerlingguy_php_exists
      tags: [ansible, ansible_php]

    - name: install geerlingguy php from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php
      register: out
      tags: [ansible, ansible_php]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_php_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_php]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.php-mysql
      register: geerlingguy_php_mysql_exists
      tags: [ansible, ansible_php_mysql]

    - name: install geerlingguy php-mysql from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php-mysql
      register: out
      tags: [ansible, ansible_php_mysql]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_php_mysql_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_php_mysql]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.adminer
      register: geerlingguy_adminer_exists
      tags: [ansible, ansible_adminer]

    - name: install geerlingguy adminer from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.adminer
      register: out
      tags: [ansible, ansible_adminer]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_adminer_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_adminer]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.java
      register: geerlingguy_java_exists
      tags: [ansible, ansible_java]

    - name: install geerlingguy java from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.java
      register: out
      tags: [ansible, ansible_java]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_java_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_java]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.solr
      register: geerlingguy_solr_exists
      tags: [ansible, ansible_solr]

    - name: install geerlingguy solr from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.solr
      register: out
      tags: [ansible, ansible_solr]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_solr_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_solr]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.mysql
      register: geerlingguy_mysql_exists
      tags: [ansible, ansible_mysql]

    - name: install geerlingguy mysql from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.mysql
      register: out
      tags: [ansible, ansible_mysql]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_mysql_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_mysql]

    - name: ssh-keygen
      shell: ssh-keygen -f /home/{{ emnies_host_username }}/.ssh/known_hosts -R [127.0.0.1]:2222
      register: out
      tags: host_authoized_key_purge

    - debug: var=out.stdout_lines
      tags: host_authoized_key_purge

# @TODO: remove guest key in case it has been changed:
# ssh-keygen -f /home/rodrigo/.ssh/known_hosts -R [127.0.0.1]:2222

#################################################
# Gest configurations
#################################################
- hosts: emnies
  become: yes
  vars_files:
    - group_vars/emnies_hosts

  tasks:
    - name: Update apt cache.
      apt: update_cache=yes cache_valid_time=86400

  roles:
    - { role: geerlingguy.apache }
    - { role: geerlingguy.php, tags: [ 'php' ] }
    - { role: geerlingguy.mysql, tags: [ 'mysql' ] }
    - { role: geerlingguy.php-mysql, tags: [ 'php-mysql' ] }
    - { role: geerlingguy.adminer, tags: [ 'adminer' ] }
    - { role: geerlingguy.java }
    - { role: geerlingguy.solr }
