#################################################
# Host Configurations
#
# ansible-playbook -l host -i baremetal_hosts -u $(whoami) host.yml -K
#################################################
---
- hosts: host
  become: yes
  vars_files:
    - group_vars/baremetal_hosts

  tasks:
    - name: Install virtualbox if needed
      become: true
      apt:
        name: virtualbox
        update_cache: yes
        state: present

    - name: Install FUSE
      become: true
      apt:
        name: fuse
        update_cache: yes
        state: present

    # Commanding the install of FUSE, even if it is alredy installed, triggers a bug that freezes the
    # boot at "starting gdm.service". A workaround for this when using Ubunto as a host is 
    # "apt install ubuntu-desktop

    - name: Install ubuntu-desktop
      become: true
      apt:
        name: ubuntu-desktop
        update_cache: yes
        state: present

    - name: Install virtualbox-dkms if needed
      become: true
      apt:
        name: virtualbox-dkms
        update_cache: yes
        state: present

    - name: dpkg-reconfigure virtualbox-dkms 
      command: dpkg-reconfigure virtualbox-dkms
      become: true
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - name: dpkg-reconfigure virtualbox 
      command: dpkg-reconfigure virtualbox
      become: true
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - name: Install headers
      become: true
      apt:
        name: linux-headers-generic
        state: present

    - name: Install git
      become: true
      apt:
        name: git
        state: present

    - local_action: stat path=/{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
      register: zipped_vagrant_exists
      tags: vagrant

    - name: Install sshfs
      become: true
      apt:
        name: sshfs
        state: present

    - local_action: stat path=/{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
      register: zipped_vagrant_exists
      tags: vagrant

    # @todo: Replace method above by using apt-get:
    # sudo apt update
    # sudo apt -y install apt-transport-https ca-certificates curl software-properties-common
    # wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
    # echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    # sudo apt update
    # sudo apt install vagrant

    - name: If vagrant is not available get vagrant zip source and checksum it
      get_url:
        url: "{{ vagrant_zip_base_path }}{{ vagrant_zip_file }}"
        dest: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        checksum: "{{ vagrant_zip_file_checksum }}"
        force: no
      register: get_vagrant
      when: zipped_vagrant_exists.stat.exists == False
      tags: vagrant

    - name: Install unzip
      become: true
      apt:
        name: unzip
        update_cache: yes
        state: present

    - name: Unzip vagrant zip if available and keep it
      unarchive:
        src: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        dest: /{{ playbook_dir }}/vagrant/
        remote_src: yes
        creates: /{{ playbook_dir }}/vagrant/vagrant
      tags: [vagrant, unzip]

    - name: Create baremetal/ansible/vagrant/.vagrant/machines if it does not exist
      shell: "mkdir -p .vagrant/machines; chmod a+w .vagrant/machines"
      register: out
      ignore_errors: true
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    # cp id_rsa.pub from user to /root/ssh

    - name: Remove vagrant zip source
      file:
        path: /{{ playbook_dir }}/vagrant/{{ vagrant_zip_file }}
        state: absent
      tags: vagrant

    - name: ls
      shell: ls {{ playbook_dir }}/vagrant
      register: out

    - debug: var=out.stdout_lines

    - name: install guest additions
      command: ./vagrant plugin install vagrant-vbguest
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - name: vagrant force destroy if present
      command: ./vagrant destroy -f
      register: out
      ignore_errors: true 
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - name: vagrant plugin install vagrant-disksize
      shell: "./vagrant plugin install vagrant-disksize"
      tags: disksize
      register: out
      args:
        chdir: /{{ playbook_dir }}/vagrant/
      become: yes
      become_user: rodrigo
    - debug: var=out.stdout_lines

    - name: Check vagrant plugin list
      shell: "./vagrant plugin list"
      args:
        chdir: /{{ playbook_dir }}/vagrant/
      tags: disksize
      register: plugin_list_output

    - debug:
        var: plugin_install_output.stdout

    - debug:
        var: plugin_list_output.stdout

    # @todo: ./vagrant box add {{ default_box }}

    - name: add box if needed
      shell: "./vagrant box add ubuntu/focal64 --insecure"
      register: out
      ignore_errors: true      
      args:
        chdir: /{{ playbook_dir }}/vagrant/

    - debug: var=out.stdout_lines

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.apache
      register: geerlingguy_apache_exists
      tags: ansible

    - name: install geerlingguy apache from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.apache
      register: out
      tags: ansible
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_apache_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: ansible

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.php
      register: geerlingguy_php_exists
      tags: [ansible, ansible_php]

    - name: install geerlingguy php from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php
      register: out
      tags: [ansible, ansible_php]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_php_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_php]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.php-mysql
      register: geerlingguy_php_mysql_exists
      tags: [ansible, ansible_php_mysql]

    - name: install geerlingguy php-mysql from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php-mysql
      register: out
      tags: [ansible, ansible_php_mysql]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_php_mysql_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_php_mysql]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.adminer
      register: geerlingguy_adminer_exists
      tags: [ansible, ansible_adminer]

    - name: install geerlingguy adminer from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.adminer
      register: out
      tags: [ansible, ansible_adminer]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_adminer_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_adminer]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.java
      register: geerlingguy_java_exists
      tags: [ansible, ansible_java]

    - name: install geerlingguy java from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.java
      register: out
      tags: [ansible, ansible_java]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_java_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_java]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.solr
      register: geerlingguy_solr_exists
      tags: [ansible, ansible_solr]

    - name: install geerlingguy solr from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.solr
      register: out
      tags: [ansible, ansible_solr]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_solr_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_solr]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.mysql
      register: geerlingguy_mysql_exists
      tags: [ansible, ansible_mysql]

    - name: install geerlingguy mysql from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.mysql
      register: out
      tags: [ansible, ansible_mysql]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_mysql_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_mysql]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.composer
      register: geerlingguy_composer_exists
      tags: [ansible, ansible_composer]

    - name: install geerlingguy composer from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.composer
      register: out
      tags: [ansible, ansible_composer]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_composer_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_composer]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.drush
      register: geerlingguy_drush_exists
      tags: [ansible, ansible_drush]

    - name: install geerlingguy drush from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.drush
      register: out
      tags: [ansible, ansible_drush]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_drush_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_drush]

    - local_action: stat path=/{{ playbook_dir }}/roles/geerlingguy.htpasswd
      register: geerlingguy_htpasswd_exists
      tags: [ansible, ansible_htpasswd]

    - name: install geerlingguy drush from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.htpasswd
      register: out
      tags: [ansible, ansible_htpasswd]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_htpasswd_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, ansible_htpasswd]

    - name: install geerlingguy certbot from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.certbot
      register: out
      tags: [ansible, certbot]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_htpasswd_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, certbot]

    - name: install geerlingguy xdebug from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php-xdebug
      register: out
      tags: [ansible, xdebug]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_htpasswd_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, xdebug]

    - name: install geerlingguy php-versions from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.php-versions
      register: out
      tags: [ansible, xdebug]
      args:
        chdir: /{{ playbook_dir }}/
      when: geerlingguy_htpasswd_exists.stat.exists == False

    - debug: var=out.stdout_lines
      tags: [ansible, xdebug]

    - name: install geerlingguy geerlingguy.gitlab from galaxy
      command: ansible-galaxy install --roles-path roles geerlingguy.gitlab
      register: out
      tags: [ansible, gitlab]
      args:
        chdir: /{{ playbook_dir }}/

    - debug: var=out.stdout_lines
      tags: [ansible, gitlab]

    - name: ./vagrant box update --insecure 
      shell: ./vagrant box update --insecure
      register: out
      ignore_errors: true
      args:
        chdir: /{{ playbook_dir }}/vagrant/

      tags: host_authoized_key_purge

    - debug: var=out.stdout_lines
      tags: host_authoized_key_purge

    - name: Recursively change ownership of a directory
      shell: chown -R {{baremetal_host_username}} /{{ playbook_dir }}
      register: out
      become: true
      ignore_errors: true
      tags: chown
      args:
        chdir: /{{ playbook_dir }}/

    - debug: var=out.stdout_lines

    - name: Create code directory
      become: yes
      file:
        path: /{{ playbook_dir }}/code
        state: directory
      tags: [code-directory]

    - name: Recursively change ownership of a directory
      shell: chown -R {{baremetal_host_username}} {{ playbook_dir }}/code
      register: out
      become: true
      ignore_errors: true
      tags: chown
      args:
        chdir: /{{ playbook_dir }}/
      tags: [code-directory]

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      community.crypto.openssl_privatekey:
        path: /etc/ssl/private/ansible.com.pem
      tags: [crypto]


    # @todo: add /home/<user>/.ssh/config file with "StrictHostKeyChecking no" in it.
    # this will avoid: 
    # "The authenticity of host '[127.0.0.1]:2224 ([127.0.0.1]:2224)' can't be established.
    # ED25519 key fingerprint is SHA256:TC+EDR3vM0ip12itwnuPa8G9Er2ZVIvamKCIF2kd378.  
    # This key is not known by any other names
    # Are you sure you want to continue connecting"
    # when running the guest playbook for the first time after machine creation.

    # sshfs -p 2222 vagrant@127.0.0.1:/var/www/html /home/{{ baremetal_host_username }}/baremetal/ansible/vagrant/data/assets/project/code

    # For managing proxy settings in order to in the host access to the main port of web server in the guest,
    # it is needed to install apache also in the host. This can be done with a simple apt-get install apache2. 
    # After that, is is needed to enable the proxy module: sudo a2enmod proxy_http.
    # And then add the mapping at the endo of /etc/apache2/ports.conf file:
    # <VirtualHost *:80>
    #   ProxyPreserveHost On
    #   ProxyRequests Off
    #   ProxyPass / http://localhost:8181/
    #   ProxyPassReverse / http://localhost:8181/
    # </VirtualHost>

    # After that, for managing letscrypt certificates, it is needed to use community.crypto collection: 
    # ansible-galaxy collection install community.crypto

    # Added by CERTBOT, needs evaluation: 
    #<VirtualHost *:80>
    #     ProxyPreserveHost On
    #     ProxyRequests Off
    #     ProxyPass / http://localhost:8181/
    #     ProxyPassReverse / http://localhost:8181/
    #RewriteEngine on
    #RewriteCond %{SERVER_NAME} =procbox.me
    #RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
    # </VirtualHost>
